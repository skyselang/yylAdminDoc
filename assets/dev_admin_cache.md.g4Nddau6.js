import{_ as a,c as e,o as t,a4 as h}from"./chunks/framework.DCU59OQD.js";const P=JSON.parse('{"title":"缓存","description":"","frontmatter":{},"headers":[],"relativePath":"dev/admin/cache.md","filePath":"dev/admin/cache.md","lastUpdated":1712972077000}'),n={name:"dev/admin/cache.md"},r=h('<h1 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h1><h2 id="缓存-1" tabindex="-1">缓存 <a class="header-anchor" href="#缓存-1" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><p>系统缓存分为：业务缓存类，通用缓存类，ThinkPHP缓存类。<br> 这样调用清除缓存接口才不会清除用户、会员token缓存。<br> 最终都是调用 ThinkPHP 缓存。</p><h3 id="业务缓存类" tabindex="-1">业务缓存类 <a class="header-anchor" href="#业务缓存类" aria-label="Permalink to &quot;业务缓存类&quot;">​</a></h3><p>业务：根据业务功能添加缓存类。<br> 例子：内容管理 app\\common\\cache\\content\\ContentCache，内容缓存操作调用此类。</p><h3 id="通用缓存类" tabindex="-1">通用缓存类 <a class="header-anchor" href="#通用缓存类" aria-label="Permalink to &quot;通用缓存类&quot;">​</a></h3><p>通用：app\\common\\cache\\Cache; 用法和 ThinkPHP 缓存使用一致。<br> 例子：app\\common\\service\\utils\\Utils。</p><h3 id="thinkphp缓存类" tabindex="-1">ThinkPHP缓存类 <a class="header-anchor" href="#thinkphp缓存类" aria-label="Permalink to &quot;ThinkPHP缓存类&quot;">​</a></h3><p>直接调用 ThinkPHP 缓存类 think\\facade\\Cache，调用清除缓存接口将不会被清除。<br> 调用 think\\facade\\Cache::clear() 方法将清空所有缓存;</p><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><p>如果缓存类型和队列驱动类型都使用了 redis，请不要使用相同 db。否则清除缓存可能使队列丢失。</p>',11),c=[r];function o(i,d,s,l,p,_){return t(),e("div",null,c)}const k=a(n,[["render",o]]);export{P as __pageData,k as default};
